# GIMP - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub patterns_refresh {
    $blurb = 'Refresh current patterns. This function always succeeds.';

    $help = <<'HELP';
This procedure retrieves all patterns currently in the user's pattern path
and updates all pattern dialogs accordingly.
HELP

    &mitch_pdb_misc('2002');

    %invoke = (
        code => <<'CODE'
{
  gimp_data_factory_data_refresh (gimp->pattern_factory, context);
}
CODE
    );
}

sub patterns_get_list {
    $blurb = 'Retrieve a complete listing of the available patterns.';

    $help = <<'HELP';
This procedure returns a complete listing of available GIMP patterns. Each name
returned can be used as input to the gimp_context_set_pattern().
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'filter', type => 'string', null_ok => 1,
          desc => 'An optional regular expression used to filter the list' }
    );

    @outargs = (
	{ name => 'pattern_list', type => 'stringarray',
	  desc => 'The list of pattern names',
	  array => { name => 'num_patterns',
		     desc => 'The number of patterns in the pattern list' } }
    );

    %invoke = (
        headers => [ qw("core/gimpcontainer-filter.h") ],
	code => <<'CODE'
{
  pattern_list = gimp_container_get_filtered_name_array (gimp_data_factory_get_container (gimp->pattern_factory),
                                                         filter, &num_patterns);
}
CODE
    );
}

sub patterns_get_pattern {
    &std_pdb_deprecated ('gimp-context-get-pattern');

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => 'The pattern name' },
	{ name => 'width', type => 'int32',
	  desc => 'The pattern width' },
	{ name => 'height', type => 'int32',
	  desc => 'The pattern height' }
    );

    %invoke = (
	code => <<'CODE'
{
  GimpPattern *pattern = gimp_context_get_pattern (context);

  if (pattern)
    {
      name   = g_strdup (gimp_object_get_name (pattern));
      width  = pattern->mask->width;
      height = pattern->mask->height;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub patterns_get_pattern_data {
    &std_pdb_deprecated ('gimp-pattern-get-pixels');

    @inargs = (
	{ name => 'name', type => 'string', null_ok => 1,
	  desc => 'The pattern name ("" means currently active pattern)' }
    );

    @outargs = (
	{ name => 'actual_name', type => 'string',
	  desc => 'The pattern name' },
	{ name => 'width', type => 'int32',
	  desc => 'The pattern width' },
	{ name => 'height', type => 'int32',
	  desc => 'The pattern height' },
	{ name => 'mask_bpp', type => 'int32',
	  desc => 'Pattern bytes per pixel' },
	{ name => 'mask_data', type => 'int8array',
	  desc => 'The pattern mask data',
	  array => { name => 'length',
		     desc => 'Length of pattern mask data' } }
    );
    
    %invoke = (
	code => <<'CODE'
{
  GimpPattern *pattern;

  if (name && strlen (name))
    pattern = gimp_pdb_get_pattern (gimp, name, error);
  else
    pattern = gimp_context_get_pattern (context);

  if (pattern)
    {
      actual_name = g_strdup (gimp_object_get_name (pattern));
      width       = pattern->mask->width;
      height      = pattern->mask->height;
      mask_bpp    = pattern->mask->bytes;
      length      = pattern->mask->height * pattern->mask->width *
	            pattern->mask->bytes;
      mask_data   = g_memdup (temp_buf_get_data (pattern->mask), length);
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h>
              "base/temp-buf.h"
              "core/gimp.h"
              "core/gimpcontext.h"
              "core/gimpdatafactory.h"
              "core/gimppattern.h"
              "gimppdb-utils.h");

@procs = qw(patterns_refresh
            patterns_get_list
            patterns_get_pattern
            patterns_get_pattern_data);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Patterns';
$doc_title = 'gimppatterns';
$doc_short_desc = 'Functions relating to patterns.';
$doc_long_desc = 'Functions relating to patterns.';

1;
